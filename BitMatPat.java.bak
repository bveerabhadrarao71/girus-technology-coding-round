public class BitMatPat {

    public static int NxtHigBit(int num) {
        //checking the edge case 
        if (num == 0) return -1;

        int count = num;
        int count0 = 0; // counting will starts with 0's
        int count1 = 0; // counting of 1's stats with 0's

        // counting will starts with 0's
        while (((count & 1) == 0) && (count != 0)) {
            count0++;
            count >>= 1;
        }

        // counting of 1's stats with 0's
        while ((count & 1) == 1) {
            count1++;
            count >>= 1;
        }

        // If num is like 11110000..000, then there is no bigger number
        if (count0 + count1 == 31 || count0 + count1 == 0) return -1;

        // Position of rightmost non-trailing zero (p)
        int position = count0 + count1;

        // Step 1: Flip rightmost non-trailing 0
        num |= (1 << position);

        // Step 2: Clear all bits to the right of p
        num &= ~((1 << position) - 1);

        // Step 3: Insert (c1-1) ones on the right
        num |= (1 << (count1 - 1)) - 1;

        return num;
    }

    public static void main(String[] args) {
        int num1 = 8; // Binary: 101 -> Output: 16 (110)
        int num2 = 9; // Binary: 1001 -> Output: 10 (1010)
        int num3 = 143; // Binary: 1111111 -> Output: 151 (10111111)

        System.out.println(" Value of Next for 8: " + NxtHigBit(num1));
        System.out.println(" Value of Next for 9: " + NxtHigBit(num2));
        System.out.println(" Value of Next for 143: " + NxtHigBit(num3));
    }
}
//1000